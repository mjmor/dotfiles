{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Web component snippet": {
		"prefix": "cod-wc",
		"body": [
			"import styles from '!!raw-loader!./$TM_FILENAME_BASE.css';",
			"import varStyles from '!!raw-loader!../../../shared/variables.css';",
			"import bootstrapStyles from '!!raw-loader!../../../shared/themed-bootstrap.css';",
			"\nconst template = document.createElement('template');",
			"template.innerHTML = `",
			"<div><slot></slot></div>",
			"`;",
			"\nclass $TM_FILENAME_BASE extends HTMLElement {",
			"	static observedAttributes = [];",

			"\n	constructor() {",
			"		// Always call super first in constructor",
			"		super();",
			"		// Create a shadow root",
			"		const shadow = this.attachShadow({ mode: 'open' });",
			"		shadow.appendChild(template.content.cloneNode(true));",
			"\n		// Add styles",
			"		const bootStyles = document.createElement('style');",
			"		bootStyles.textContent = bootstrapStyles;",
			"		const variableStyles = document.createElement('style');",
			"		variableStyles.textContent = varStyles;",
			"		const itemStyles = document.createElement('style');",
			"		itemStyles.textContent = styles;",
			"		shadow.appendChild(bootStyles);",
			"		shadow.appendChild(variableStyles);",
			"		shadow.appendChild(itemStyles);",
			"	}",

			"\n	connectedCallback() {",
			"		// TODO: Handle attribute values, add classes, etc.",
			"	}",

			"\n	attributeChangedCallback(name, oldValue, newValue) {",
			"		// TODO: Handle attr changes.",
			"	}",
			"}",

			"\nexport { $TM_FILENAME_BASE as default };",
		],
		"description": "Add a web component (a la City of Detroit design system)."
	},
	"Define custom element": {
		"prefix": "cod-wc-ce",
		"body": [
			"import ${1:component} from './${1:component}';",
			"customElements.define('$TM_FILENAME_BASE', ${1:component});",
		],
		"description": "Define custom element"
	}
}